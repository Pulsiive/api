// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id @default(uuid())
  email    String @unique
  password String
}

model User {
  id               String    @id @default(uuid())
  firstName        String
  lastName         String
  email            String    @unique
  password         String
  dateOfBirth      DateTime
  emailVerifiedAt  DateTime?
  balance          Int       @default(0)
  contacts         Contact[] @relation(name: "UserContactList")
  contactOf        Contact[] @relation(name: "ContactOf")
  vehicles         Vehicle[]
  privateStations  Station[]
  wroteRatings     Rating[]
  receivedRatings  Rating[]  @relation(name: "Recipient")
  likedRatings     Rating[]  @relation(name: "likedRatings")
  dislikedRatings  Rating[]  @relation(name: "dislikedRatings")
  orders           Order[]
  sentMessages     Message[] @relation(name: "Author")
  receivedMessages Message[] @relation(name: "Receiver")
  reservations     Slot[]
  isFromOAuth      Boolean   @default(false)
}

model PasswordReset {
  id        String   @id @default(uuid())
  token     String
  email     String   @unique
  createdAt DateTime @default(now())
}

model PhoneNumberVerification {
  id          String   @id @default(uuid())
  otp         String
  phoneNumber String   @unique
  createdAt   DateTime @default(now())
}

model Contact {
  id              String       @id @default(uuid())
  user            User         @relation(fields: [userId], references: [id], name: "ContactOf")
  userId          String
  author          User         @relation(fields: [authorId], references: [id], onDelete: Cascade, name: "UserContactList")
  authorId        String
}

model Vehicle {
  id             String                @id @default(uuid())
  owner          User                  @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId        String
  type           VehicleType           @default(CAR)
  plugTypes      PlugType[]
  electricalType VehicleElectricalType
  maxPower       Decimal
}

model Station {
  id          String              @id @default(uuid())
  owner       User?               @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     String?
  orders      Order[]
  rate        Float               @default(0)
  rateNumber  Int                 @default(0)
  coordinates StationCoordinates?
  properties  StationProperties?
  rates       Rating[]
}

model StationCoordinates {
  id          String  @id @default(uuid())
  station     Station @relation(fields: [stationId], references: [id], onDelete: Cascade)
  stationId   String  @unique
  lat         Decimal
  long        Decimal
  address     String
  city        String
  country     String
  countryCode String
}

model StationProperties {
  id               String     @id @default(uuid())
  station          Station    @relation(fields: [stationId], references: [id], onDelete: Cascade)
  stationId        String     @unique
  isPublic         Boolean
  maxPower         Decimal
  price            Int
  nbChargingPoints Int
  isGreenEnergy    Boolean
  plugTypes        PlugType[]
  slots            Slot[]
}

model Slot {
  id                  String            @id @default(uuid())
  stationProperties   StationProperties @relation(fields: [stationPropertiesId], references: [id], onDelete: Cascade)
  stationPropertiesId String
  isBooked            Boolean           @default(false)
  driver              User?             @relation(fields: [driverId], references: [id], onDelete: Cascade)
  driverId            String?
  opensAt             DateTime
  closesAt            DateTime
}

model Rating {
  id          String   @id @default(uuid())
  recipient   User?    @relation(fields: [recipientId], references: [id], name: "Recipient", onDelete: Cascade)
  recipientId String?
  station     Station? @relation(fields: [stationId], references: [id], onDelete: Cascade)
  stationId   String?
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  likedBy     User[]   @relation(name: "likedRatings")
  dislikedBy  User[]   @relation(name: "dislikedRatings")
  rate        Int
  comment     String?
  pictures    String[]
  date        DateTime
  likes       Int      @default(0)
  dislikes    Int      @default(0)
}

model Order {
  id         String   @id @default(uuid())
  customer   User     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String
  station    Station  @relation(fields: [stationId], references: [id], onDelete: Cascade)
  stationId  String
  date       DateTime
  price      Int
}

model Message {
  id         String   @id @default(uuid())
  author     User     @relation(fields: [authorId], references: [id], name: "Author", onDelete: Cascade)
  authorId   String
  receiver   User     @relation(fields: [receiverId], references: [id], name: "Receiver", onDelete: Cascade)
  receiverId String
  body       String
  createdAt  DateTime
  read       Boolean? @default(false)
}

model EmailVerification {
  id        String   @id @default(uuid())
  token     String
  email     String   @unique
  createdAt DateTime @default(now())
}

enum VehicleType {
  CAR
  SCOOTER
  MOTORBIKE
  BIKE
}

enum VehicleElectricalType {
  BEV
  HEV
  PHEV
}

enum PlugType {
  TYPE1
  TYPE2
  TYPE3
  CCS
  CHADEMO
  GREENUP
  EF
}
