// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider     = "prisma-client-js"
  binaryTarget = ["linux-arm64-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id @default(uuid())
  email    String @unique
  password String
}

model User {
  id              String           @id @default(uuid())
  firstName       String
  lastName        String
  email           String           @unique
  password        String
  dateOfBirth     DateTime
  balance         Int              @default(0)
  vehicles        Vehicle[]
  privateStations Station[]
  comments        StationComment[]
  orders          Order[]
  sentMessages Message[] @relation(name: "Author")
  receivedMessages Message[] @relation(name: "Receiver")
  Reservation           Reservation[]
}

model PasswordReset {
  id        String   @id @default(uuid())
  token     String
  email     String   @unique
  createdAt DateTime @default(now())
}

model PhoneNumberVerification {
  id          String   @id @default(uuid())
  otp         String
  phoneNumber String   @unique
  createdAt   DateTime @default(now())
}

model Vehicle {
  id             String                @id @default(uuid())
  owner          User                  @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId        String
  type           VehicleType           @default(CAR)
  plugTypes      PlugType[]
  electricalType VehicleElectricalType
  maxPower       Decimal
}

model Station {
  id          String              @id @default(uuid())
  owner       User                @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     String
  orders      Order[]
  rate        Int                 @default(0)
  coordinates StationCoordinates?
  properties  StationProperties?
  comments    StationComment[]
}

model StationCoordinates {
  id          String  @id @default(uuid())
  station     Station @relation(fields: [stationId], references: [id], onDelete: Cascade)
  stationId   String  @unique
  lat         Decimal
  long        Decimal
  address     String
  city        String
  country     String
  countryCode String
}

model StationProperties {
  id               String     @id @default(uuid())
  station          Station    @relation(fields: [stationId], references: [id], onDelete: Cascade)
  stationId        String     @unique
  isPublic         Boolean
  maxPower         Decimal
  price            Int
  nbChargingPoints Int
  isGreenEnergy    Boolean
  plugTypes        PlugType[]
  slots            Slot[]
}

model Slot {
  id                  String            @id @default(uuid())
  stationProperties   StationProperties @relation(fields: [stationPropertiesId], references: [id], onDelete: Cascade)
  stationPropertiesId String
  reservations        Reservation[]
  day                 Int               @db.SmallInt
  opensAt             DateTime          @db.Time(0)
  closesAt            DateTime          @db.Time(0)
}

model Reservation {
  id     String   @id @default(uuid())
  slot   Slot     @relation(fields: [slotId], references: [id], onDelete: Cascade)
  slotId String
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  from   DateTime @db.Time(0)
  to     DateTime @db.Time(0)
}

model StationComment {
  id        String   @id @default(uuid())
  station   Station  @relation(fields: [stationId], references: [id], onDelete: Cascade)
  stationId String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  rate      Int
  body      String
  pictures  String[]
  dates     DateTime
  likes     Int
}

model Order {
  id         String   @id @default(uuid())
  customer   User     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String
  station    Station  @relation(fields: [stationId], references: [id], onDelete: Cascade)
  stationId  String
  date       DateTime
  price      Int
}

model Message {
  id String @id @default(uuid())
  author User @relation(fields: [authorId], references: [id], name: "Author")
  authorId String
  receiver User @relation(fields: [receiverId], references: [id], name: "Receiver")
  receiverId String
  body String
  createdAt DateTime
  read Boolean? @default(false)
}

enum VehicleType {
  CAR
  SCOOTER
  MOTORBIKE
  BIKE
}

enum VehicleElectricalType {
  BEV
  HEV
  PHEV
}

enum PlugType {
  TYPE1
  TYPE2
  TYPE3
  CCS
  CHADEMO
  GREENUP
}
